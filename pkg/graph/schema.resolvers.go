package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"
	"fmt"
	"time"

	"github.com/enuesaa/walkin/pkg/graph/model"
	"github.com/google/uuid"
)

// Invocations is the resolver for the invocations field.
func (r *queryResolver) Invocations(ctx context.Context, status int) ([]*model.Invocation, error) {
	list := make([]*model.Invocation, 0)
	if status == 200 {
		list = append(list, &model.Invocation{
			ID:     "a",
			Status: 200,
			Method: "GET",
			URL:    "https://example.com",
			RequestHeaders: []*model.Header{
				{Name: "Accept", Value: "application/json"},
			},
			ResponseHeaders: []*model.Header{},
			RequestBody:     nil,
			ResponseBody:    nil,
		})
	}
	if status == 404 {
		list = append(list, &model.Invocation{
			ID:     "b",
			Status: 404,
			Method: "GET",
			URL:    "https://example.com/aa",
			RequestHeaders: []*model.Header{
				{Name: "Accept", Value: "application/json"},
			},
			ResponseHeaders: []*model.Header{},
			RequestBody:     nil,
			ResponseBody:    nil,
		})
	}
	return list, nil
}

// Name is the resolver for the name field.
func (r *subscriptionResolver) Name(ctx context.Context) (<-chan string, error) {
	ch := make(chan string)

	go func() {
		defer close(ch)
		for {
			time.Sleep(1 * time.Second)
			t := uuid.New().String()
			select {
			case <-ctx.Done():
				fmt.Println("Subscription Closed")
				return
			case ch <- t: // This is the actual send.
			}
		}
	}()

	return ch, nil
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
