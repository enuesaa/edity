package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"
	"fmt"
	"time"

	"github.com/enuesaa/walkin/pkg/graph/model"
	"github.com/enuesaa/walkin/pkg/invoke"
	"github.com/enuesaa/walkin/pkg/repository"
)

// Invocations is the resolver for the invocations field.
func (r *queryResolver) Invocations(ctx context.Context) ([]*model.Invocation, error) {
	list := make([]*model.Invocation, 0)

	repos := repository.NewRepos()
	invocations, err := invoke.ListLogs(repos)
	if err != nil {
		return make([]*model.Invocation, 0), err
	}
	list = make([]*model.Invocation, 0)
	for i, invocation := range invocations {
		list = append(list, &model.Invocation{
			ID:              fmt.Sprintf("%d", i),
			Status:          invocation.Status,
			Method:          invocation.Method,
			URL:             invocation.Url,
			RequestHeaders:  make([]*model.Header, 0),
			ResponseHeaders: make([]*model.Header, 0),
			RequestBody:     &invocation.RequestBody,
			ResponseBody:    &invocation.ResponseBody,
		})
	}

	return list, nil
}

// Invocation is the resolver for the invocation field.
func (r *queryResolver) Invocation(ctx context.Context, id string) (*model.Invocation, error) {
	repos := repository.NewRepos()
	invocations, err := invoke.ListLogs(repos)
	if err != nil {
		return nil, err
	}
	for i, invocation := range invocations {
		if fmt.Sprintf("%d", i) == id {
			return &model.Invocation{
				ID:              fmt.Sprintf("%d", i),
				Status:          invocation.Status,
				Method:          invocation.Method,
				URL:             invocation.Url,
				RequestHeaders:  make([]*model.Header, 0),
				ResponseHeaders: make([]*model.Header, 0),
				RequestBody:     &invocation.RequestBody,
				ResponseBody:    &invocation.ResponseBody,
			}, nil
		}
	}

	return nil, fmt.Errorf("not found")
}

// Invocations is the resolver for the invocations field.
func (r *subscriptionResolver) Invocations(ctx context.Context) (<-chan []*model.Invocation, error) {
	ch := make(chan []*model.Invocation)

	go func() {
		defer close(ch)
		for {
			time.Sleep(1 * time.Second)
			t := make([]*model.Invocation, 0)
			t = append(t, &model.Invocation{
				ID: "3",
				Status: 200,
				Method: "GET",
				URL: "https://example.com",
			})
			select {
			case <-ctx.Done():
				fmt.Println("Subscription Closed")
				return
			case ch <- t: // This is the actual send.
			}
		}
	}()

	return ch, nil
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
