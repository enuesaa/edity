package invoke

// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"
	"time"
)

func (r *queryResolver) Invocations(ctx context.Context) ([]*Invocation, error) {
	invokeSrv := NewInvokeSrv(r.repos)
	return invokeSrv.ListLogs()
}

func (r *queryResolver) Invocation(ctx context.Context, id string) (*Invocation, error) {
	invokeSrv := NewInvokeSrv(r.repos)
	return invokeSrv.GetLog(id)
}

func (r *subscriptionResolver) Invocations(ctx context.Context) (<-chan []*Invocation, error) {
	ch := make(chan []*Invocation)
	invokeSrv := NewInvokeSrv(r.repos)

	go func() {
		defer close(ch)
		for {
			time.Sleep(1 * time.Second)
			invocations, err := invokeSrv.ListLogs()
			if err != nil {
				continue
			}
			select {
			case <-ctx.Done():
				return
			case ch <- invocations:
			}
		}
	}()

	return ch, nil
}

func (r *Resolver) Query() QueryResolver {
	return &queryResolver{r}
}

func (r *Resolver) Subscription() SubscriptionResolver {
	return &subscriptionResolver{r}
}
