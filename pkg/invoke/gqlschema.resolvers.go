package invoke

// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"
	"fmt"
)

func (r *queryResolver) Invocations(ctx context.Context) ([]*Invocation, error) {
	return make([]*Invocation, 0), nil
}

func (r *queryResolver) Invocation(ctx context.Context, id string) (*Invocation, error) {
	return nil, fmt.Errorf("not implemented")
}

func (r *subscriptionResolver) Invocations(ctx context.Context) (<-chan []*Invocation, error) {
	ch := make(chan []*Invocation)

	go func() {
		defer close(ch)
		// for {
		// 	time.Sleep(1 * time.Second)
		// 	invocations, err := invokeSrv.ListLogs()
		// 	if err != nil {
		// 		continue
		// 	}
		// 	select {
		// 	case <-ctx.Done():
		// 		return
		// 	case ch <- invocations:
		// 	}
		// }
	}()

	return ch, nil
}

func (r *Resolver) Query() QueryResolver {
	return &queryResolver{r}
}

func (r *mutationResolver) MakeServerInvocation(ctx context.Context, invocation ServerInvocationInput) (*bool, error) {
	return nil, fmt.Errorf("not implemented")
}
func (r *mutationResolver) MakeBrowserInvocation(ctx context.Context, invocation BrowserInvocationInput) (*bool, error) {
	return nil, fmt.Errorf("not implemented")
}

func (r *Resolver) Mutation() MutationResolver {
	return &mutationResolver{r}
}

func (r *Resolver) Subscription() SubscriptionResolver {
	return &subscriptionResolver{r}
}
